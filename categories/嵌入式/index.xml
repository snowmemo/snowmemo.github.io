<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>嵌入式 on Magical trees, take me home.</title><link>/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/</link><description>Recent content in 嵌入式 on Magical trees, take me home.</description><generator>Hugo -- gohugo.io</generator><language>zh</language><lastBuildDate>Mon, 04 Nov 2024 06:40:28 +0000</lastBuildDate><atom:link href="/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>Buildroot Cheatsheet</title><link>/posts/buildroot-cheetsheet/</link><pubDate>Wed, 04 Sep 2024 00:00:00 +0800</pubDate><guid>/posts/buildroot-cheetsheet/</guid><description>完整文档可以在官方网站找到。
快速开始一个buildroot项目 buildroot_repo=https://github.com/buildroot/buildroot.git buildroot_version=2022.11 buildroot_src=buildroot-$buildroot_version buildroot_defcfg=raspberrypi4_defconfig git clone --branch $buildroot_version --depth 1 $buildroot_repo make -C $buildroot_src defconfig BR2_DEFCONFIG=$buildroot_defcfg make -C $buildroot_src linux-reconfigure all 基本命令 Make 提示
使用 make help 获取所有可用目标的列表。
命令 描述 make 构建 rootfs make xyz_defconfig 选择配置文件 make menuconfig 打开配置菜单 make savedefconfig 将当前配置保存到 defconfig 文件中 make source 下载包的源代码 make clean 清理所有构建产品（包括构建目录、主机、暂存和目标树、镜像和工具链） make distclean 清理所有内容，包括配置 包管理 特定包的 make 目标
命令 描述 make &amp;lt;pkg&amp;gt; 构建一个包 make &amp;lt;pkg&amp;gt;-reinstall 重新安装一个包 make &amp;lt;pkg&amp;gt;-rebuild 重新构建一个包（这意味着重新安装） make &amp;lt;pkg&amp;gt;-reconfigure 重新配置一个包（这意味着重新构建） make &amp;lt;pkg&amp;gt;-dirclean 清理包目录 调试 命令 描述 make graph-depends 生成依赖关系图 make &amp;lt;pkg&amp;gt;-graph-depends 生成包的依赖关系图 目录结构 目录 描述 configs 单板的配置和 defconfig 文件的位置 package 包定义的位置 dl 下载的源代码压缩包 output/build 所有组件构建的目录 output/images 构建的内核、引导加载程序和根文件系统镜像的位置 output/staging 交叉编译工具链和用户空间包的头文件和库的位置（这是 host//sysroot 的软链） output/host 包括交叉编译工具链在内的主机工具的位置 output/target 几乎是最终的目标根文件系统 .</description></item><item><title>Yocto &amp; Bitbake Cheatsheet</title><link>/posts/yocto-cheetsheet/</link><pubDate>Wed, 04 Sep 2024 00:00:00 +0800</pubDate><guid>/posts/yocto-cheetsheet/</guid><description>完整文档可以在Yocto 文档网站找到。 参考自yoctoproject-cheatsheet。
Cli 命令 需要先通过source setup-environment设置Bitbake环境
命令 描述 bitbake 编译指定的 image bitbake -c 执行指定的 task。 可选的 task 有: fetch, unpack, patch, configure, compile, install, package, clean, cleansstate, rebuild, reconfigure, reinstall等。 bitbake -c cleanall 清理指定的 recipe. 包括工作目录和 sstate cache bitbake -c devshell 进入指定 recipe 的 shell 环境 bitbake -c listtasks 列出指定 recipe 的所有 task bitbake -c showappends 显示指定 recipe 的所有 append 文件 bitbake -e 显示指定 recipe 的所有变量 bitbake -s 列出所有可用的 recipe bitbake -S 显示指定 recipe 的依赖关系 bitbake &amp;ndash;graphviz &amp;ndash;ui=depexp 生成的包依赖关系图 bitbake-layers show-layers 显示所有的 layer bitbake-layers show-appends 显示所有的 append 文件 bitbake-layers show-recipes 显示所有的 recipe bitbake-layers show-recipes &amp;ldquo;gdb*&amp;rdquo; 搜索 recipe bitbake-layers show-depends 显示所有的依赖关系 变量语法和操作 参考自Bitbake User Manual</description></item></channel></rss>